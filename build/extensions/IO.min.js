define(["exports","../graph"],function(exports,_graph){"use strict";function serialize(object,graph){if(graph.addNode(object),"object"==typeof object)for(var property in object)try{var value=object[property];graph.hasNode(value)||serialize(value,graph),graph.addEdge(object,value)}catch(e){}}var _slicedToArray=function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr)){for(var _step,_arr=[],_iterator=arr[Symbol.iterator]();!(_step=_iterator.next()).done&&(_arr.push(_step.value),!i||_arr.length!==i););return _arr}throw new TypeError("Invalid attempt to destructure non-iterable instance")},_createClass=function(){function defineProperties(target,props){for(var key in props){var prop=props[key];prop.configurable=!0,prop.value&&(prop.writable=!0)}Object.defineProperties(target,props)}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_classCallCheck=function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")};Object.defineProperty(exports,"__esModule",{value:!0});{var Graph=_graph.Graph;exports.Importer=function(){function Importer(){_classCallCheck(this,Importer)}return _createClass(Importer,null,{importObject:{value:function(object){if("object"!=typeof object)throw Error("Argument is not an object!");var graph=new Graph(!0);return serialize(object,graph),graph}}}),Importer}(),exports.Migrator=function(){function Migrator(){_classCallCheck(this,Migrator)}return _createClass(Migrator,null,{migrateGraph:{value:function(source,target){var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=source.nodes[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var _step$value=_slicedToArray(_step.value,1),node=_step$value[0];target.addNode(node)}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator["return"]&&_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError}}var _iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _step2,_iterator2=source.edges[Symbol.iterator]();!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0){var edge=_step2.value;target.addEdge(edge.source,edge.target,edge.weight)}}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{!_iteratorNormalCompletion2&&_iterator2["return"]&&_iterator2["return"]()}finally{if(_didIteratorError2)throw _iteratorError2}}}}}),Migrator}()}});