define(["exports","../../node_modules/d3/d3","../external/requestAnimationFunction.c"],function(exports,_node_modulesD3D3,_externalRequestAnimationFunctionC){"use strict";var _interopRequire=function(obj){return obj&&obj.__esModule?obj["default"]:obj},_createClass=function(){function defineProperties(target,props){for(var key in props){var prop=props[key];prop.configurable=!0,prop.value&&(prop.writable=!0)}Object.defineProperties(target,props)}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_classCallCheck=function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")};Object.defineProperty(exports,"__esModule",{value:!0});{var d3=_interopRequire(_node_modulesD3D3),requestAnimationFunction=_externalRequestAnimationFunctionC.requestAnimationFunction,$force=Symbol(),$svg=Symbol(),$dom_svg=Symbol(),$circle_data=Symbol(),$path_data=Symbol(),$graph=Symbol(),$resize=Symbol(),Wrap=function Wrap(node){_classCallCheck(this,Wrap),this.value=node};exports.D3SVG=function(){function D3SVG(svg,graph){var _this=this;if(_classCallCheck(this,D3SVG),!svg)throw Error("No svg element specified");if(!graph)throw Error("No graph specified");var force=d3.layout.force();this[$resize]=requestAnimationFunction(function(){var _getComputedStyle=getComputedStyle(svg),width=_getComputedStyle.width,height=_getComputedStyle.height;force.size([parseInt(width),parseInt(height)]),force.alpha(.1)}),this[$graph]=graph,this[$dom_svg]=svg,this[$force]=force,this[$svg]=window.svg=d3.select(svg),this[$force].on("tick",function(){_this[$circle_data].attr("transform",function(node){return"translate("+node.x+","+node.y+")"}),_this[$path_data].attr("d",function(_ref){var source=_ref.source,target=_ref.target;return"M"+source.x+","+source.y+"L "+target.x+","+target.y})}),this.update()}return _createClass(D3SVG,{update:{value:function(){this.resize();var nodes=[],edges=[],node_map=new Map,_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=this[$graph].nodes.keys()[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var node=_step.value,wrap=new Wrap(node);node_map.set(node,wrap),nodes.push(wrap)}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator["return"]&&_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError}}var _iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _step2,_iterator2=this[$graph].edges[Symbol.iterator]();!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0){var _step2$value=_step2.value,source=_step2$value.source,target=_step2$value.target,source_wrap=node_map.get(source),target_wrap=node_map.get(target);edges.push({source:source_wrap,target:target_wrap})}}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{!_iteratorNormalCompletion2&&_iterator2["return"]&&_iterator2["return"]()}finally{if(_didIteratorError2)throw _iteratorError2}}this[$force].nodes(nodes).links(edges),this[$circle_data]=this[$svg].selectAll("circle").data(nodes),this[$path_data]=this[$svg].selectAll("path").data(edges),this[$circle_data].enter().append("circle").attr("r",5).call(this[$force].drag),this[$path_data].enter().append("path"),this[$circle_data].exit().remove(),this[$path_data].exit().remove()}},resize:{value:function(){this[$resize]()}},graph:{get:function(){return this[$graph]}},force:{get:function(){return this[$force]}}}),D3SVG}()}});