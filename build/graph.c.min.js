define(["exports"],function(exports){"use strict";var _slicedToArray=function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr)){for(var _step,_arr=[],_iterator=arr[Symbol.iterator]();!(_step=_iterator.next()).done&&(_arr.push(_step.value),!i||_arr.length!==i););return _arr}throw new TypeError("Invalid attempt to destructure non-iterable instance")},_toConsumableArray=function(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)},_get=function get(object,property,receiver){var desc=Object.getOwnPropertyDescriptor(object,property);if(void 0===desc){var parent=Object.getPrototypeOf(object);return null===parent?void 0:get(parent,property,receiver)}if("value"in desc&&desc.writable)return desc.value;var getter=desc.get;return void 0===getter?void 0:getter.call(receiver)},_inherits=function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(subClass.__proto__=superClass)},_createClass=function(){function defineProperties(target,props){for(var key in props){var prop=props[key];prop.configurable=!0,prop.value&&(prop.writable=!0)}Object.defineProperties(target,props)}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_classCallCheck=function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")};Object.defineProperty(exports,"__esModule",{value:!0});var _ref=function(){var $nodes=Symbol(),$dependencies=Symbol(),$dependents=Symbol(),$directed=Symbol(),Graph=function(){function Graph(){var directed=void 0===arguments[0]?!1:arguments[0];_classCallCheck(this,Graph),this[$nodes]=new Map,this.directed=!!directed}return _createClass(Graph,{directed:{get:function(){return this[$directed]},set:function(directed){if(this[$directed]=!!directed,this.directed){var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=this.edges[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var edge=_step.value;this.addEdge.apply(this,_toConsumableArray(edge))}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator["return"]&&_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError}}}}},nodes:{get:function(){return new Map(this[$nodes])}},edges:{get:function(){var edges=[],_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=this[$nodes][Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var _step$value=_slicedToArray(_step.value,2),node=_step$value[0],relations=_step$value[1],_iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _step2,_iterator2=relations.dependents[Symbol.iterator]();!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0){var _step2$value=_slicedToArray(_step2.value,2),dependent=_step2$value[0],weight=_step2$value[1];edges.push([node,dependent,weight])}}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{!_iteratorNormalCompletion2&&_iterator2["return"]&&_iterator2["return"]()}finally{if(_didIteratorError2)throw _iteratorError2}}}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator["return"]&&_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError}}return edges}},addNode:{value:function(object){var relations=Object.defineProperties({},{dependencies:{get:function(){return new Map(this[$dependencies])},configurable:!0,enumerable:!0},dependents:{get:function(){return new Map(this[$dependents])},configurable:!0,enumerable:!0}});return relations[$dependencies]=new Map,relations[$dependents]=new Map,this[$nodes].set(object,relations),!0}},removeNode:{value:function(object){this[$nodes]["delete"](object);var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=this[$nodes][Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var _step$value=_slicedToArray(_step.value,2),relations=_step$value[1];relations[$dependents]["delete"](object),relations[$dependencies]["delete"](object)}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator["return"]&&_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError}}}},addEdge:{value:function(source,target){var weight=void 0===arguments[2]?1:arguments[2],nodes=this[$nodes];return[source,target].every(nodes.has.bind(nodes))?(nodes.get(source)[$dependents].set(target,weight),nodes.get(target)[$dependencies].set(source,weight),this.directed||(nodes.get(target)[$dependents].set(source,weight),nodes.get(source)[$dependencies].set(target,weight)),!0):!1}},removeEdge:{value:function(source,target){var nodes=this[$nodes];return[source,target].every(nodes.has.bind(nodes))?(nodes.get(source)[$dependents]["delete"](target),nodes.get(target)[$dependencies]["delete"](source),this.directed||(nodes.get(target)[$dependents]["delete"](source),nodes.get(source)[$dependencies]["delete"](target)),!0):!1}},hasCycle:{value:function(){return!!this.getCycle()}},getCycle:{value:function(){function DFS(node,dependency,length){if(!finished.has(node)){if(visited.has(node))return length;visited.add(node);var nodes=this[$nodes],_iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _step2,_iterator2=node[$dependents][Symbol.iterator]();!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0){var _step2$value=_slicedToArray(_step2.value,1),dependent=_step2$value[0],dependent_node=nodes.get(dependent);if(directed||dependent_node!==dependency){var depth=DFS.call(this,dependent_node,node,length+1);if(depth)return depth}}}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{!_iteratorNormalCompletion2&&_iterator2["return"]&&_iterator2["return"]()}finally{if(_didIteratorError2)throw _iteratorError2}}finished.add(node)}}var directed=this.directed,finished=new Set,visited=new Set,_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=this[$nodes][Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var _step$value=_slicedToArray(_step.value,2),relations=_step$value[1],depth=DFS.call(this,relations,void 0,0);if(depth)return depth}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator["return"]&&_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError}}return!1}}}),Graph}(),AcyclicGraph=function(_Graph){function AcyclicGraph(){_classCallCheck(this,AcyclicGraph),null!=_Graph&&_Graph.apply(this,arguments)}return _inherits(AcyclicGraph,_Graph),_createClass(AcyclicGraph,{addEdge:{value:function(source,target,weight){var added=_get(Object.getPrototypeOf(AcyclicGraph.prototype),"addEdge",this).call(this,source,target,weight);if(added&&_get(Object.getPrototypeOf(AcyclicGraph.prototype),"hasCycle",this).call(this)){if(this.removeEdge(source,target))return!1;throw Error("Cyclic node could not be removed")}return added}},hasCycle:{value:function(){var real=void 0===arguments[0]?!1:arguments[0];return!!real&&_get(Object.getPrototypeOf(AcyclicGraph.prototype),"hasCycle",this).call(this)}}}),AcyclicGraph}(Graph),Tree=function(_AcyclicGraph){function Tree(){_classCallCheck(this,Tree),null!=_AcyclicGraph&&_AcyclicGraph.apply(this,arguments)}return _inherits(Tree,_AcyclicGraph),_createClass(Tree,{addEdge:{value:function(source,target,weight){return this[$nodes].get(target)[$dependencies].size>0?!1:_get(Object.getPrototypeOf(Tree.prototype),"addEdge",this).call(this,source,target,weight)}}}),Tree}(AcyclicGraph);return[Graph,AcyclicGraph,Tree]}(),_ref2=_slicedToArray(_ref,3),Graph=_ref2[0],AcyclicGraph=_ref2[1],Tree=_ref2[2];exports.Graph=Graph,exports.AcyclicGraph=AcyclicGraph,exports.Tree=Tree});