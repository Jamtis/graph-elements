"use strict";function applyModel(a,b,c,d){console.log("\n"+c+" | "+a.directed+" | "+d),console.time("init");var e=!0,f=!1,g=void 0;try{for(var h,i=nodes[Symbol.iterator]();!(e=(h=i.next()).done);e=!0){var j=h.value;a.addNode(j)}}catch(k){f=!0,g=k}finally{try{!e&&i["return"]&&i["return"]()}finally{if(f)throw g}}var l=!0,m=!1,n=void 0;try{for(var o,p=b[Symbol.iterator]();!(l=(o=p.next()).done);l=!0){var q=o.value;a.addEdge(q[0],q[1])}}catch(k){m=!0,n=k}finally{try{!l&&p["return"]&&p["return"]()}finally{if(m)throw n}}console.timeEnd("init"),console.time("Cycle check"),console.log("Cycle: "+a.hasCycle()),console.timeEnd("Cycle check"),console.time("Edges check"),console.log("Edges: "+a.edges.length),console.timeEnd("Edges check")}var _graph=require("../graph"),Graph=_graph.Graph,AcyclicGraph=_graph.AcyclicGraph,Tree=_graph.Tree;window.Graph=Graph,window.AcyclicGraph=AcyclicGraph,window.Tree=Tree,console.log("graphjs loaded"),console.log("length: "+length),console.time("preparation");for(var length=20,nodes=[],edge_array=[],densities=[0,.01,.5,1,10],i=0;length>i;++i)nodes.push(i);var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=densities[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){for(var density=_step.value,edges=[],i=0;i<Math.pow(length,2)*density;++i)edges.push([Math.floor(Math.random()*length),Math.floor(Math.random()*length)]);edges.density=density,edge_array.push(edges)}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator["return"]&&_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError}}var static_edges=function(){var a=[],b=!0,c=!1,d=void 0;try{for(var e,f=nodes[Symbol.iterator]();!(b=(e=f.next()).done);b=!0){var g=e.value;a.push([Math.floor(Math.abs(Math.sin(g))*(length-1)),Math.floor(Math.abs(Math.cos(g))*(length-1))])}}catch(h){c=!0,d=h}finally{try{!b&&f["return"]&&f["return"]()}finally{if(c)throw d}}return a}();static_edges.density=1,edge_array.push(static_edges),console.timeEnd("preparation");var _iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _iterator2=["Graph","AcyclicGraph","Tree"][Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0){var _name=_step2.value,_iteratorNormalCompletion3=!0,_didIteratorError3=!1,_iteratorError3=void 0;try{for(var _iterator3=edge_array[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=!0){var edges=_step3.value,graph=new window[_name],dgraph=new window[_name](!0);applyModel(graph,edges,_name,edges.density),applyModel(dgraph,edges,_name,edges.density)}}catch(err){_didIteratorError3=!0,_iteratorError3=err}finally{try{!_iteratorNormalCompletion3&&_iterator3["return"]&&_iterator3["return"]()}finally{if(_didIteratorError3)throw _iteratorError3}}}}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{!_iteratorNormalCompletion2&&_iterator2["return"]&&_iterator2["return"]()}finally{if(_didIteratorError2)throw _iteratorError2}}